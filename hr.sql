-- employees 에서 전체 내용을 조회 

​

SELECT

*

FROM

EMPLOYEES e;

-- first_name, last_name,jom_id

​

SELECT

first_name,

last_name,

job_id

FROM

EMPLOYEES e;

-- 사원번호가 176인 사람의 LAST_NAME과 DEPARTMENT_ID 조회

​
SELECT last_name, department_id 
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 176;



-- 연봉이 12000 이상 되는 직원들의 LAST_NAME과 SALARY 조회

​

SELECT LAST_NAME, SALARY

FROM EMPLOYEES e

WHERE SALARY >=12000;

​

-- 연봉이 5000에서 12000의 범위 이외의 사람들의 LAST_NAME과 샐러리 조회

SELECT LAST_NAME, SALARY

FROM EMPLOYEES e

WHERE SALARY < 5000 OR SALARY > 12000

ORDER BY SALARY DESC ;

​

SELECT LAST_NAME, SALARY

FROM EMPLOYEES e

WHERE SALARY NOT BETWEEN 5000 AND 12000

ORDER BY SALARY DESC ;

​

-- 부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME, DEPARTMENT_ID 조회 

​

​

SELECT LAST_NAME, DEPARTMENT_ID

FROM EMPLOYEES e

WHERE DEPARTMENT_ID IN (20,50)

ORDER BY LAST_NAME , DEPARTMENT_ID;

​

-- 커미션을 버는 모든 사원들의 LAST_NAME, SALARY, COMMISION_PCT 조회

​

SELECT LAST_NAME, SALARY, COMMISSION_PCT

FROM EMPLOYEES e

WHERE COMMISSION_PCT > 0

ORDER BY SALARY DESC, COMMISSION_PCT DESC ;

​

-- SALARY가 2500,3500,7000이 아니며 JOB이 SA_REP나 ST_CLERK 사원 조회

​

SELECT * FROM EMPLOYEES e

WHERE SALARY NOT IN (2500,3500,7000)

AND JOB_ID IN ('SA_REP', 'ST_CLERK');

​

SELECT * FROM EMPLOYEES e

WHERE SALARY !=2500 AND SALARY != 3500 AND SALARY != 7000

AND (JOB_ID = 'SA_REP' OR JOB_ID = 'ST_CLERK');

​

​

-- 2017-01-01 에서 2017-12-31 사이에 고용된 사원들의 LAST_NAME, EMPOLOYEE_ID,HIRE_DATE조회

-- HIRE_DATE 내림차순 정렬

​

​

SELECT LAST_NAME, EMPLOYEE_ID,HIRE_DATE

FROM EMPLOYEES e

WHERE HIRE_DATE >= '2017-01-01' AND HIRE_DATE <= '2017-12-31'

ORDER BY hire_date DESC;

​

SELECT LAST_NAME, EMPLOYEE_ID,HIRE_DATE

FROM EMPLOYEES e

WHERE e.HIRE_DATE BETWEEN '2017-01-01' AND '2017-12-31';

​

​

-- 부서번호가 20, 50 부서에서 근무하는 사원들의 연봉이 5000 ~ 12000 사이인 사원들의 LAST_NAME, SALARY 조회

-- SALATY 오름차순

​

SELECT LAST_NAME, SALARY

FROM EMPLOYEES e

WHERE DEPARTMENT_ID IN (20,50)

AND SALARY BETWEEN 5000 AND 12000

ORDER BY SALARY ;



-- LAST NAME에 u가 포함되는 사원들의 사번, last_name 조회 

SELECT LAST_NAME, EMPLOYEE_ID
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%u%';

-- LAST_NAME의 4번째 문자가 a인 사원들의 사번, last_name 조회

SELECT LAST_NAME, EMPLOYEE_ID
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '___a%';


-- last_name에 a혹은 e 글자가 들어있는 사원들의 사번, last_name 조회 후 last_name 오름차순 조회

SELECT LAST_NAME, EMPLOYEE_ID
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%'
ORDER BY LAST_NAME ASC ;

-- last_name에 a와 e글자가 들어있는 사원들의 사번, last_name 조회 후 last_name 오름차순 조회

SELECT LAST_NAME, EMPLOYEE_ID
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%e%' OR LAST_NAME LIKE '%e%a%'
ORDER BY LAST_NAME ASC ;



SELECT * FROM EMPLOYEES e ;



-- 매니저가 없는 사람들의 LAST_NAME, JOB_ID 조회

SELECT LAST_NAME, JOB_ID FROM
EMPLOYEES e 
WHERE MANAGER_ID IS NULL;


-- ST_CLERK인 JOB_ID를 가진 사원이 없는 부서 ID조회 (단 부서번호가 NULL인 사원 제외)

SELECT DEPARTMENT_ID FROM
EMPLOYEES e 
WHERE JOB_ID NOT IN  ('ST_CLERK')
AND DEPARTMENT_ID IS NOT NULL;

SELECT DISTINCT DEPARTMENT_ID FROM
EMPLOYEES e 
WHERE JOB_ID != 'ST_CLERK'
AND DEPARTMENT_ID IS NOT NULL;

-- COMMISSION_PCT가 NULL이 아닌 사원들 중에서 COMMISSION = SALARY * COMMISSION_PCT를 구하여
EMPLOYEE_ID, FIRST_NAME, JOB_ID, COMMISSON을 조회

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, COMMISSION_PCT *SALARY AS COMMISSION
FROM EMPLOYEES e 
WHERE COMMISSION_PCT IS NOT NULL;

-- NULL * 숫자 = NULL 

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID,SALARY,COMMISSION_PCT , COMMISSION_PCT *SALARY AS COMMISSION
FROM EMPLOYEES e 


-- FIRST_NAME 이 'curtis' 인 사원의 first_name, last_name, email, phone_number, job_id를 조회 
(단 job-id 결과는 소문자로 출력)

SELECT first_name, last_name, email, phone_number, LOWER(JOB_ID)
FROM EMPLOYEES e
WHERE FIRST_NAME = 'Steven';




-- 부서번호가 60,70,80,90인 사원들의 employee_id, first_name, hire_date, job id 조회
(단, job_id가 IT_PROG인 사원의 경우 프로그래머로 변경하여 출력한다.)

SELECT employee_id, first_name, hire_date, REPLACE (job_id, 'IT PROG', '프로그래머') 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (60,70,80,90)




SELECT employee_id, first_name, hire_date, REPLACE(JOB_ID,'IT PROG','프로그래머') 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (60,70,80,90)



-- JOB_ID 가 AD_PRES, PU_CLERK 인 사원들의 EMPLOYEE_ID, FIRST_NAME, JOB_ID 조회
(단, 사원명은 FIRST_NAME과 LAST_NAME 공백을 포함하여 연결)

SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME AS NAME , JOB_ID
FROM EMPLOYEES e 
WHERE JOB_ID IN ('AD_PRES', 'PU_CLERK');



SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME AS NAME, JOB_ID
FROM EMPLOYEES e 
WHERE JOB_ID IN ( 'AD_PRES', 'PU_CLERK');




SELECT 
LAST_NAME ,SALARY
, DECODE(SALARY, BETWEEN '0' OR '1999') 
FROM EMPLOYEES e; 


실습 4 풀이 

SELECT 
LAST_NAME, SALARY ,
CASE TRUNC(SALARY/2000,0)
WHEN 0 THEN '0%'
WHEN 1 THEN '9%'
WHEN 2 THEN '20%'
WHEN 3 THEN '30%'
WHEN 4 THEN '40%'
WHEN 5 THEN '42%'
WHEN 6 THEN '44%'
ELSE '45%'
END AS TAX_RATE
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID = 80




-- 최대 연봉 - 최소 연봉 차이 조회 

SELECT 
MAX(SALARY) - MIN(SALARY) AS 연봉차이
FROM EMPLOYEES e 

-- MGR 근무하는 사원 수 총 조회 (MGR 번호 중복 제거) 


SELECT COUNT(DISTINCT (MANAGER_ID)) 
FROM EMPLOYEES e 







-- 부서별 직원 수 구하기 (부서 번호의 오름차순) 

SELECT 
DEPARTMENT_ID, COUNT(EMPLOYEE_ID)
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID; 


-- 부서별 평균 급여 (부서번호의 오름차순 )

SELECT
DEPARTMENT_ID , ROUND(AVG(SALARY),0)
FROM
	EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID;


-- 동일한 직무를 가진 사원들의 총 수 조회 

SELECT
JOB_ID , COUNT(EMPLOYEE_ID)
FROM
EMPLOYEES e 
GROUP BY JOB_ID ;


-- 매니저가 관리하는 사원들 중에서 최소급여 조회
-- 매니저가 관리하는 사원들 중에서 최소 급여가 6000미만인 최소급여는 제외 
-- 매니저가 없는 사원 제외 


SELECT MANAGER_ID , MIN(SALARY) 
FROM
	EMPLOYEES e 
	WHERE MANAGER_ID IS NOT NULL  
GROUP BY MANAGER_ID HAVING MIN(SALARY) > 6000 



JOIN - 여러 테이블을 하나의 테이블 처럼 사용


SELECT FROM EMPLOYEES e D



-- 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기 

SELECT
	e.hire_date AS 내입사일,
    e.LAST_name AS 내이름, 
	e.manager_id AS 매니저 번호,
	e2.HIRE_DATE AS 매니저 입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	e.manager_id = e2.EMPLOYEE_ID AND e.HIRE_DATE < e2.HIRE_DATE ; 


-- 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, LAST_NAME, 부서번호 조회 
-- 도시명은 LOCATIONS 테이블에 

SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME ,
	d.DEPARTMENT_ID ,
	l.CITY 
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON
	d.LOCATION_ID = l.LOCATION_ID 
WHERE
	L.CITY LIKE 'T%';


-- 위치 아이디가 1700인 사원들의 LAST_NAME, 부서번호, 연봉 조회 

SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME  ,
	d.DEPARTMENT_ID
FROM
	EMPLOYEES e
LEFT OUTER JOIN DEPARTMENTS d ON
	e.MANAGER_ID = d.MANAGER_ID
LEFT OUTER JOIN LOCATIONS l ON
	d.LOCATION_ID = l.LOCATION_ID
WHERE
	L.LOCATION_ID = 1700

--부서명, 위치ID, 각부서 별 사원 수, 각 부서별 평균 연봉 조회 
-- 평균 연봉은 소수점 2자리까지만 표현 


SELECT
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID ,
	COUNT(E.EMPLOYEE_ID),
	ROUND(AVG(E.SALARY), 2)
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY
	D.DEPARTMENT_NAME  ,
	D.LOCATION_ID 

-- EXCUTIVE 부서에 근무하는 사원들의 부서번호, LAST_NAME , JOB_ID 조회

SELECT
	D.DEPARTMENT_ID ,
	E.LAST_NAME ,
	E.JOB_ID
FROM
	EMPLOYEES e
LEFT OUTER JOIN DEPARTMENTS d ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE
	D.DEPARTMENT_NAME = 'Executive'

-- 각 부서별 소속 부서에서 자신보다 늦게 고용되었으나 많은 연봉을 받는 사원이 존재하는
-- 사원들의 이름 조회 ( 이름은 FIRST_NAME과 LAST_NAME 을 결합하여 하나로 나오게 하기)
-- 부서번호, 결합된 이름, SALARY, HIREDATE 출력 


	SELECT * FROM EMPLOYEES e JOIN EMPLOYEES e2 ON
	DEPARTMENT_ID = E2.DEPARTMENT_ID 
	AND FIRST_NAME 
	
	
SELECT
	DISTINCT e.DEPARTMENT_ID AS 부서번호,
	e.FIRST_NAME || ' ' || e.LAST_NAME AS "내 이름",
    E.SALARY  AS 내 급여 ,
	e.HIRE_DATE AS 내 입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	e.DEPARTMENT_ID = e2.DEPARTMENT_ID
	AND e.SALARY < e2.SALARY  AND HIRE_DATE < E2.HIRE_DATE; 




서브쿼리 

-- LAST_NAME 에 u 가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 last_name 조회 
--  사번 오름차순 

SELECT
	EMPLOYEE_ID ,
	LAST_name
FROM
	EMPLOYEES e
WHERE
	DEPARTMENT_ID IN (
	SELECT
		DISTINCT DEPARTMENT_ID
	FROM
		EMPLOYEES e
	WHERE
		LAST_NAME LIKE '%u%')
ORDER BY
	EMPLOYEE_ID ;





	(SELECT * FROM EMPLOYEES e2
	WHERE LAST_NAME = 'u')


	
	
	
-- 각 직무별 연봉 총합 및 각 부서별 연봉 총합 조회 
-- JOB_ID, 부서별 연봉 총합, 전체 총합 

	
SELECT JOB_ID, 
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 10 AND E.JOB_ID = E2.JOB_ID ) AS DEPT10,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 20 AND E.JOB_ID = E2.JOB_ID ) AS DEPT20,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 30 AND E.JOB_ID = E2.JOB_ID ) AS DEPT30,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 40 AND E.JOB_ID = E2.JOB_ID ) AS DEPT40,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 50 AND E.JOB_ID = E2.JOB_ID ) AS DEPT50,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 60 AND E.JOB_ID = E2.JOB_ID ) AS DEPT60,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 70 AND E.JOB_ID = E2.JOB_ID ) AS DEPT70,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 80 AND E.JOB_ID = E2.JOB_ID ) AS DEPT80,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 90 AND E.JOB_ID = E2.JOB_ID ) AS DEPT90,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 100 AND E.JOB_ID = E2.JOB_ID ) AS DEPT100,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE DEPARTMENT_ID = 110 AND E.JOB_ID = E2.JOB_ID ) AS DEPT110,
(SELECT SUM(SALARY) FROM EMPLOYEES e2  WHERE E.JOB_ID = E2.JOB_ID) AS TOTAL
FROM EMPLOYEES e 
GROUP BY E.JOB_ID 
ORDER BY JOB_ID
	
	
	
--JOB_ID 가 SA_MAN인 사원들의 최대 연봉보다 높게 받는 사원들의 LAST_NAME, 부서번호, 연봉 조회


SELECT
	e.LAST_NAME ,
	e.DEPARTMENT_ID ,
	e.SALARY,
	e.JOB_ID
FROM
	EMPLOYEES e
WHERE
	SALARY > ANY (
	SELECT
		MAX(E2.SALARY)
	FROM
		EMPLOYEES e2
	WHERE
		E2.JOB_ID = 'SA_MAN' )


--커미션을 버는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME , 부서번호, 연봉 조회



SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	(e.DEPARTMENT_ID ,E.SALARY) IN (
	SELECT
		e2.DEPARTMENT_ID ,E2.SALARY
	FROM
		EMPLOYEES e2
	WHERE
		E2.COMMISSION_PCT IS NOT NULL)



-- 회사 전체 평균 연봉보다 더 많이 버는 사원들 중 LAST_NAME에 u가 있는 사원들이 근무하는 부서에서
-- 근무하는 사원들의 사번, LAST_NAME , 부서번호, 연봉 조회


		SELECT
	E.EMPLOYEE_ID ,
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	SALARY
FROM
	EMPLOYEES e
WHERE
	E.DEPARTMENT_ID IN 
(
	SELECT
		E.DEPARTMENT_ID
	FROM
		EMPLOYEES e
	WHERE
		salary > (
		SELECT
			AVG(SALARY)
		FROM
			EMPLOYEES e)
		AND LAST_NAME LIKE '%U%')		
		

-- 각 부서별 평균 연봉보다 더 받는 동일 부서 근무 사원들의 LAST_NAME , 부서번호, 연봉 조회
-- 부서별 연봉을 기준으로 정렬 


SELECT
	E1.LAST_NAME, E1.DEPARTMENT_ID, E1.SALARY, E2.DEPT_SAL_AVG
FROM
	EMPLOYEES E1,
	(
	SELECT
		DEPARTMENT_ID ,
		AVG(SALARY) AS DEPT_SAL_AVG
	FROM
		EMPLOYEES e
	GROUP BY
		DEPARTMENT_ID) E2 		
WHERE 		
	E1.DEPARTMENT_ID = E2.DEPARTMENT_ID AND E1.SALARY > E2.DEPT_SAL_AVG 
ORDER BY DEPARTMENT_ID ; 		
		

-- last_name이 davies인 사람보다 후에 고용된 사원들의 last_name, hire_date 조회

SELECT LAST_NAME ,HIRE_DATE 
FROM EMPLOYEES e 
WHERE HIRE_DATE
> (SELECT HIRE_DATE 
FROM
	EMPLOYEES e 
WHERE LAST_NAME LIKE 'Davies')


-- last_name이 King인 사원을 매니저로 두고 있는 모든 사원들의 last_name, salary 조회 

SELECT E.LAST_NAME , E.SALARY FROM EMPLOYEES e WHERE MANAGER_ID A 
IN
(SELECT EMPLOYEE_ID FROM EMPLOYEES e WHERE LAST_NAME LIKE 'King')

-- last_name이 Kochhar 인 사원과 동일한 연봉 및 커미션을 버는 사원들의 last_name, 부서번호, salary 조회
-- Kochhar는 제외

SELECT
	e.LAST_NAME ,
	e.DEPARTMENT_ID ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE 
(e.SALARY , NVL(e.COMMISSION_PCT ,0))
in
(
	SELECT
		e.SALARY ,
		NVL(e.COMMISSION_PCT , 0)
		FROM EMPLOYEES e
	WHERE
		LAST_NAME = 'Kochhar')



-- 부서가 위치한 국가 ID, 국가 이름 조회 
-- countries 테이블과 locations, departments 이용 

		
		SELECT 
		c.COUNTRY_ID ,c.COUNTRY_NAME  FROM COUNTRIES c  WHERE c.COUNTRY_ID  
		IN
(SELECT
	l.COUNTRY_ID
FROM
	LOCATIONS l ,
		(
	SELECT
		d.LOCATION_ID
	FROM
		DEPARTMENTS d) D
WHERE l.LOCATION_ID = d.LOCATION_ID) 		
		
		

-- 총 사원 수 및 2013,2014,2015,2016 년도 별 고용된 사원들의 총 수를 조회한다.




-- 연도별 계산 방법 / TO_CHAR
SELECT COUNT(employee_id) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE, 'YYYY') = '2013'  

-- LIKE 
SELECT COUNT(employee_id) FROM EMPLOYEES e WHERE HIRE_DATE LIKE '13%'  


-- 서브쿼리 

SELECT
	(
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e2 ) AS "총 사원수" ,
	(
	SELECT
		COUNT(employee_id)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'YYYY') = '2013') AS '2013',
	(
	SELECT
		COUNT(employee_id)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'YYYY') = '2014') AS '2014',
	(
	SELECT
		COUNT(employee_id)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'YYYY') = '2015') AS '2015',
	(
	SELECT
		COUNT(employee_id)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'YYYY') = '2016') AS '2016'
FROM
	EMPLOYEES; 






-- 위치 id가 1700인 사원들의 연봉과 커미션을 추출한 뒤, 추출된 사원들의 연봉과 커미션이 동일한 사원정보 조회
-- 사원번호, 이름(결합), 부서번호, 급여 출력 

SELECT EMPLOYEE_ID , FIRST_NAME || ' ' || LAST_NAME  AS NAME, DEPARTMENT_ID , SALARY 
FROM EMPLOYEES e 
WHERE (SALARY ,NVL(COMMISSION_PCT,0)) IN 
(SELECT SALARY ,NVL(COMMISSION_PCT,0) FROM EMPLOYEES e  
WHERE E.DEPARTMENT_ID 
IN
(SELECT D.DEPARTMENT_ID FROM DEPARTMENTS d  WHERE D.LOCATION_ID = 1700))












